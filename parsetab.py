
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL DIVIDE ELSE EQUAL EQUAL_EQUAL FALSE FLOAT FLOAT_NUMBER FOR GREATER GREATER_EQUAL ID IF INPUT INT INT_NUMBER LEFT_BR LEFT_BR_CURLY LESS LESS_EQUAL MINUS MULTIPLY NOT_EQUAL OR PLUS PRINT PROGRAM RIGHT_BR RIGHT_BR_CURLY SEMICOLON STRING TEXT TRUE VAR\n    start_symbol : program\n    \n    program : PROGRAM LEFT_BR_CURLY instructions RIGHT_BR_CURLY\n            | empty\n    \n    instructions : instruction\n        | instruction instructions\n    \n    instruction : for_loop\n        | if_statement\n        | assignment\n        | empty\n        | var_declaration\n        | print\n        | input\n    \n    for_loop : for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY\n    \n    for_loop_statement : FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR EQUAL VAR PLUS number RIGHT_BR\n    | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR EQUAL VAR MINUS number RIGHT_BR\n    \n    if_statement : IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY\n                 | IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY  else_statement\n    \n    else_statement : ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY\n    \n    comparisons : comparison\n        | comparison conjunction comparisons\n    \n    comparison : value comparator value\n    \n    comparator : LESS\n        | LESS_EQUAL\n        | GREATER\n        | GREATER_EQUAL\n        | EQUAL_EQUAL\n        | NOT_EQUAL\n    \n    operator : PLUS\n        | MINUS\n        | MULTIPLY\n        | DIVIDE\n    \n    type : INT\n        | STRING\n        | BOOL\n        | FLOAT\n    \n    conjunction : AND\n        | OR\n    \n    number : INT_NUMBER\n        | FLOAT_NUMBER\n    \n    bool_value : TRUE\n        | FALSE\n    \n    value : number\n        | VAR\n        | TEXT\n        | bool_value\n        | math_operation\n    \n    math_operation : VAR operator VAR\n        | VAR operator number\n        | number operator VAR\n        | number operator number\n    \n    assignment : VAR EQUAL value SEMICOLON\n               | VAR EQUAL VAR SEMICOLON\n    \n    var_declaration : type VAR SEMICOLON\n        | type VAR EQUAL value SEMICOLON\n        | type VAR EQUAL VAR SEMICOLON\n    \n    print : PRINT LEFT_BR out RIGHT_BR SEMICOLON\n    \n    out : TEXT\n        | VAR\n        | number\n    \n    input : INPUT LEFT_BR VAR RIGHT_BR SEMICOLON\n    \n    empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end':([0,1,2,4,26,],[-61,0,-1,-3,-2,]),'LEFT_BR_CURLY':([3,15,59,100,115,116,],[5,28,83,102,-14,-15,]),'IF':([5,7,8,9,10,11,12,13,14,28,50,58,76,77,83,90,91,92,93,97,99,102,106,],[16,16,-6,-7,-8,-9,-10,-11,-12,16,-53,-13,-52,-51,16,-55,-54,-56,-60,-16,-17,16,-18,]),'VAR':([5,7,8,9,10,11,12,13,14,18,22,23,24,25,28,29,30,32,33,50,51,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,90,91,92,93,97,98,99,102,106,107,109,],[17,17,-6,-7,-8,-9,-10,-11,-12,31,-32,-33,-34,-35,17,40,48,54,56,-53,78,82,-13,40,-36,-37,40,-22,-23,-24,-25,-26,-27,87,-28,-29,-30,-31,88,-52,-51,17,-55,-54,-56,-60,-16,101,-17,17,-18,108,110,]),'PRINT':([5,7,8,9,10,11,12,13,14,28,50,58,76,77,83,90,91,92,93,97,99,102,106,],[19,19,-6,-7,-8,-9,-10,-11,-12,19,-53,-13,-52,-51,19,-55,-54,-56,-60,-16,-17,19,-18,]),'INPUT':([5,7,8,9,10,11,12,13,14,28,50,58,76,77,83,90,91,92,93,97,99,102,106,],[20,20,-6,-7,-8,-9,-10,-11,-12,20,-53,-13,-52,-51,20,-55,-54,-56,-60,-16,-17,20,-18,]),'FOR':([5,7,8,9,10,11,12,13,14,28,50,58,76,77,83,90,91,92,93,97,99,102,106,],[21,21,-6,-7,-8,-9,-10,-11,-12,21,-53,-13,-52,-51,21,-55,-54,-56,-60,-16,-17,21,-18,]),'INT':([5,7,8,9,10,11,12,13,14,28,34,50,58,76,77,83,90,91,92,93,97,99,102,106,],[22,22,-6,-7,-8,-9,-10,-11,-12,22,57,-53,-13,-52,-51,22,-55,-54,-56,-60,-16,-17,22,-18,]),'STRING':([5,7,8,9,10,11,12,13,14,28,50,58,76,77,83,90,91,92,93,97,99,102,106,],[23,23,-6,-7,-8,-9,-10,-11,-12,23,-53,-13,-52,-51,23,-55,-54,-56,-60,-16,-17,23,-18,]),'BOOL':([5,7,8,9,10,11,12,13,14,28,50,58,76,77,83,90,91,92,93,97,99,102,106,],[24,24,-6,-7,-8,-9,-10,-11,-12,24,-53,-13,-52,-51,24,-55,-54,-56,-60,-16,-17,24,-18,]),'FLOAT':([5,7,8,9,10,11,12,13,14,28,50,58,76,77,83,90,91,92,93,97,99,102,106,],[25,25,-6,-7,-8,-9,-10,-11,-12,25,-53,-13,-52,-51,25,-55,-54,-56,-60,-16,-17,25,-18,]),'RIGHT_BR_CURLY':([5,6,7,8,9,10,11,12,13,14,27,28,35,50,58,76,77,83,90,91,92,93,95,97,99,102,104,106,],[-61,26,-4,-6,-7,-8,-9,-10,-11,-12,-5,-61,58,-53,-13,-52,-51,-61,-55,-54,-56,-60,97,-16,-17,-61,106,-18,]),'LEFT_BR':([16,19,20,21,],[29,32,33,34,]),'EQUAL':([17,31,82,108,],[30,51,94,109,]),'TEXT':([29,30,32,51,60,61,62,63,64,65,66,67,68,69,],[41,41,53,41,41,-36,-37,41,-22,-23,-24,-25,-26,-27,]),'INT_NUMBER':([29,30,32,51,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,94,103,111,112,],[44,44,44,44,44,-36,-37,44,-22,-23,-24,-25,-26,-27,44,-28,-29,-30,-31,44,96,105,44,44,]),'FLOAT_NUMBER':([29,30,32,51,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,111,112,],[45,45,45,45,45,-36,-37,45,-22,-23,-24,-25,-26,-27,45,-28,-29,-30,-31,45,45,45,]),'TRUE':([29,30,51,60,61,62,63,64,65,66,67,68,69,],[46,46,46,46,-36,-37,46,-22,-23,-24,-25,-26,-27,]),'FALSE':([29,30,51,60,61,62,63,64,65,66,67,68,69,],[47,47,47,47,-36,-37,47,-22,-23,-24,-25,-26,-27,]),'SEMICOLON':([31,39,41,42,43,44,45,46,47,48,49,78,79,80,81,86,87,88,89,96,105,],[50,-42,-44,-45,-46,-38,-39,-40,-41,76,77,90,91,92,93,-50,-49,-47,-48,98,107,]),'RIGHT_BR':([36,37,39,40,41,42,43,44,45,46,47,52,53,54,55,56,84,85,86,87,88,89,113,114,],[59,-19,-42,-43,-44,-45,-46,-38,-39,-40,-41,80,-57,-58,-59,81,-20,-21,-50,-49,-47,-48,115,116,]),'AND':([37,39,40,41,42,43,44,45,46,47,85,86,87,88,89,],[61,-42,-43,-44,-45,-46,-38,-39,-40,-41,-21,-50,-49,-47,-48,]),'OR':([37,39,40,41,42,43,44,45,46,47,85,86,87,88,89,],[62,-42,-43,-44,-45,-46,-38,-39,-40,-41,-21,-50,-49,-47,-48,]),'LESS':([38,39,40,41,42,43,44,45,46,47,86,87,88,89,101,],[64,-42,-43,-44,-45,-46,-38,-39,-40,-41,-50,-49,-47,-48,103,]),'LESS_EQUAL':([38,39,40,41,42,43,44,45,46,47,86,87,88,89,],[65,-42,-43,-44,-45,-46,-38,-39,-40,-41,-50,-49,-47,-48,]),'GREATER':([38,39,40,41,42,43,44,45,46,47,86,87,88,89,],[66,-42,-43,-44,-45,-46,-38,-39,-40,-41,-50,-49,-47,-48,]),'GREATER_EQUAL':([38,39,40,41,42,43,44,45,46,47,86,87,88,89,],[67,-42,-43,-44,-45,-46,-38,-39,-40,-41,-50,-49,-47,-48,]),'EQUAL_EQUAL':([38,39,40,41,42,43,44,45,46,47,86,87,88,89,],[68,-42,-43,-44,-45,-46,-38,-39,-40,-41,-50,-49,-47,-48,]),'NOT_EQUAL':([38,39,40,41,42,43,44,45,46,47,86,87,88,89,],[69,-42,-43,-44,-45,-46,-38,-39,-40,-41,-50,-49,-47,-48,]),'PLUS':([39,40,44,45,48,78,110,],[71,71,-38,-39,71,71,111,]),'MINUS':([39,40,44,45,48,78,110,],[72,72,-38,-39,72,72,112,]),'MULTIPLY':([39,40,44,45,48,78,],[73,73,-38,-39,73,73,]),'DIVIDE':([39,40,44,45,48,78,],[74,74,-38,-39,74,74,]),'ELSE':([97,],[100,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start_symbol':([0,],[1,]),'program':([0,],[2,]),'empty':([0,5,7,28,83,102,],[4,11,11,11,11,11,]),'instructions':([5,7,28,83,102,],[6,27,35,95,104,]),'instruction':([5,7,28,83,102,],[7,7,7,7,7,]),'for_loop':([5,7,28,83,102,],[8,8,8,8,8,]),'if_statement':([5,7,28,83,102,],[9,9,9,9,9,]),'assignment':([5,7,28,83,102,],[10,10,10,10,10,]),'var_declaration':([5,7,28,83,102,],[12,12,12,12,12,]),'print':([5,7,28,83,102,],[13,13,13,13,13,]),'input':([5,7,28,83,102,],[14,14,14,14,14,]),'for_loop_statement':([5,7,28,83,102,],[15,15,15,15,15,]),'type':([5,7,28,83,102,],[18,18,18,18,18,]),'comparisons':([29,60,],[36,84,]),'comparison':([29,60,],[37,37,]),'value':([29,30,51,60,63,],[38,49,79,38,85,]),'number':([29,30,32,51,60,63,70,75,111,112,],[39,39,55,39,39,39,86,89,113,114,]),'bool_value':([29,30,51,60,63,],[42,42,42,42,42,]),'math_operation':([29,30,51,60,63,],[43,43,43,43,43,]),'out':([32,],[52,]),'conjunction':([37,],[60,]),'comparator':([38,],[63,]),'operator':([39,40,48,78,],[70,75,75,75,]),'else_statement':([97,],[99,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start_symbol","S'",1,None,None,None),
  ('start_symbol -> program','start_symbol',1,'p_start_symbol','main.py',105),
  ('program -> PROGRAM LEFT_BR_CURLY instructions RIGHT_BR_CURLY','program',4,'p_program','main.py',111),
  ('program -> empty','program',1,'p_program','main.py',112),
  ('instructions -> instruction','instructions',1,'p_instructions','main.py',118),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','main.py',119),
  ('instruction -> for_loop','instruction',1,'p_instruction','main.py',125),
  ('instruction -> if_statement','instruction',1,'p_instruction','main.py',126),
  ('instruction -> assignment','instruction',1,'p_instruction','main.py',127),
  ('instruction -> empty','instruction',1,'p_instruction','main.py',128),
  ('instruction -> var_declaration','instruction',1,'p_instruction','main.py',129),
  ('instruction -> print','instruction',1,'p_instruction','main.py',130),
  ('instruction -> input','instruction',1,'p_instruction','main.py',131),
  ('for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY','for_loop',4,'p_for_loop','main.py',137),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR EQUAL VAR PLUS number RIGHT_BR','for_loop_statement',17,'p_for_loop_statement','main.py',143),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR EQUAL VAR MINUS number RIGHT_BR','for_loop_statement',17,'p_for_loop_statement','main.py',144),
  ('if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY','if_statement',7,'p_if_statement','main.py',150),
  ('if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY else_statement','if_statement',8,'p_if_statement','main.py',151),
  ('else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY','else_statement',4,'p_else_statement','main.py',157),
  ('comparisons -> comparison','comparisons',1,'p_comparisons','main.py',163),
  ('comparisons -> comparison conjunction comparisons','comparisons',3,'p_comparisons','main.py',164),
  ('comparison -> value comparator value','comparison',3,'p_comparison','main.py',170),
  ('comparator -> LESS','comparator',1,'p_comparator','main.py',176),
  ('comparator -> LESS_EQUAL','comparator',1,'p_comparator','main.py',177),
  ('comparator -> GREATER','comparator',1,'p_comparator','main.py',178),
  ('comparator -> GREATER_EQUAL','comparator',1,'p_comparator','main.py',179),
  ('comparator -> EQUAL_EQUAL','comparator',1,'p_comparator','main.py',180),
  ('comparator -> NOT_EQUAL','comparator',1,'p_comparator','main.py',181),
  ('operator -> PLUS','operator',1,'p_operator','main.py',187),
  ('operator -> MINUS','operator',1,'p_operator','main.py',188),
  ('operator -> MULTIPLY','operator',1,'p_operator','main.py',189),
  ('operator -> DIVIDE','operator',1,'p_operator','main.py',190),
  ('type -> INT','type',1,'p_type','main.py',196),
  ('type -> STRING','type',1,'p_type','main.py',197),
  ('type -> BOOL','type',1,'p_type','main.py',198),
  ('type -> FLOAT','type',1,'p_type','main.py',199),
  ('conjunction -> AND','conjunction',1,'p_conjunction','main.py',205),
  ('conjunction -> OR','conjunction',1,'p_conjunction','main.py',206),
  ('number -> INT_NUMBER','number',1,'p_number','main.py',213),
  ('number -> FLOAT_NUMBER','number',1,'p_number','main.py',214),
  ('bool_value -> TRUE','bool_value',1,'p_bool_value','main.py',220),
  ('bool_value -> FALSE','bool_value',1,'p_bool_value','main.py',221),
  ('value -> number','value',1,'p_value','main.py',227),
  ('value -> VAR','value',1,'p_value','main.py',228),
  ('value -> TEXT','value',1,'p_value','main.py',229),
  ('value -> bool_value','value',1,'p_value','main.py',230),
  ('value -> math_operation','value',1,'p_value','main.py',231),
  ('math_operation -> VAR operator VAR','math_operation',3,'p_math_operation','main.py',237),
  ('math_operation -> VAR operator number','math_operation',3,'p_math_operation','main.py',238),
  ('math_operation -> number operator VAR','math_operation',3,'p_math_operation','main.py',239),
  ('math_operation -> number operator number','math_operation',3,'p_math_operation','main.py',240),
  ('assignment -> VAR EQUAL value SEMICOLON','assignment',4,'p_assignment','main.py',246),
  ('assignment -> VAR EQUAL VAR SEMICOLON','assignment',4,'p_assignment','main.py',247),
  ('var_declaration -> type VAR SEMICOLON','var_declaration',3,'p_var_declaration','main.py',253),
  ('var_declaration -> type VAR EQUAL value SEMICOLON','var_declaration',5,'p_var_declaration','main.py',254),
  ('var_declaration -> type VAR EQUAL VAR SEMICOLON','var_declaration',5,'p_var_declaration','main.py',255),
  ('print -> PRINT LEFT_BR out RIGHT_BR SEMICOLON','print',5,'p_print','main.py',261),
  ('out -> TEXT','out',1,'p_out','main.py',267),
  ('out -> VAR','out',1,'p_out','main.py',268),
  ('out -> number','out',1,'p_out','main.py',269),
  ('input -> INPUT LEFT_BR VAR RIGHT_BR SEMICOLON','input',5,'p_input','main.py',275),
  ('empty -> <empty>','empty',0,'p_empty','main.py',281),
]
